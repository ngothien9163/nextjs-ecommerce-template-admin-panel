import React from 'react';
import { Form, Input, Switch, InputNumber, Select, Upload, Row, Col, Card, Typography, Divider, Space, Button, Collapse, Tooltip } from 'antd';
import { JsonField } from '../JsonField';
import { MediaSelector } from '../media-selector';
import { UploadOutlined, PlusOutlined, MinusCircleOutlined, InfoCircleOutlined, GlobalOutlined, ShareAltOutlined, TwitterOutlined, CodeOutlined, BarChartOutlined, TrophyOutlined, SettingOutlined } from '@ant-design/icons';
import './seo-form.css';

const { TextArea } = Input;
const { Title, Text } = Typography;
const { Panel } = Collapse;

interface SEOFormProps {
  form: any;
  isEdit?: boolean;
}

export const SEOForm: React.FC<SEOFormProps> = ({ form, isEdit = false }) => {
  const [ogType, setOgType] = React.useState('website');
  const [twitterCard, setTwitterCard] = React.useState('summary_large_image');

  // Custom JsonField wrapper for Ant Design Form integration
  const JsonFieldWrapper: React.FC<{ value?: any; onChange?: (value: any) => void }> = ({ value, onChange }) => {
    const [isExpanded, setIsExpanded] = React.useState(false);

    // Function to expand all JSON child elements
    const expandAllJsonChildren = (obj: any, path: string[] = []): any => {
      if (obj === null || obj === undefined) return obj;
      if (typeof obj !== 'object') return obj;

      if (Array.isArray(obj)) {
        return obj.map((item, index) => expandAllJsonChildren(item, [...path, index.toString()]));
      }

      const expandedObj: any = {};
      for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          const value = obj[key];
          if (typeof value === 'object' && value !== null) {
            // Add expansion metadata for nested objects
            expandedObj[key] = {
              ...expandAllJsonChildren(value, [...path, key]),
              _expanded: true // Mark as expanded
            };
          } else {
            expandedObj[key] = value;
          }
        }
      }
      return expandedObj;
    };

    const handleExpandAll = () => {
      if (value && typeof value === 'object') {
        const expandedValue = expandAllJsonChildren(value);
        setIsExpanded(true);
        onChange?.(expandedValue);
      }
    };

    return (
      <div style={{ position: 'relative' }}>
        <JsonField
          value={value}
          onChange={onChange}
          height={280} // Increased by 40% from 200 to 280
        />
        <Button
          size="small"
          type="text"
          onClick={handleExpandAll}
          style={{
            position: 'absolute',
            top: 8,
            right: 8,
            zIndex: 10,
            background: 'rgba(255, 255, 255, 0.9)',
            border: '1px solid #d9d9d9'
          }}
          title="M·ªü r·ªông t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ JSON"
        >
          üîç M·ªü r·ªông
        </Button>
      </div>
    );
  };

  const ogTypeOptions = [
    { label: 'Website', value: 'website' },
    { label: 'Article', value: 'article' },
    { label: 'Product', value: 'product' },
    { label: 'Book', value: 'book' },
    { label: 'Profile', value: 'profile' },
    { label: 'Music', value: 'music.song' },
    { label: 'Video', value: 'video.other' },
  ];

  const twitterCardOptions = [
    { label: 'Summary', value: 'summary' },
    { label: 'Summary Large Image', value: 'summary_large_image' },
    { label: 'App', value: 'app' },
    { label: 'Player', value: 'player' },
  ];

  const robotsOptions = [
    { label: 'Index, Follow', value: 'index,follow' },
    { label: 'Index, No Follow', value: 'index,nofollow' },
    { label: 'No Index, Follow', value: 'noindex,follow' },
    { label: 'No Index, No Follow', value: 'noindex,nofollow' },
    { label: 'Index, Follow, No Archive', value: 'index,follow,noarchive' },
    { label: 'Index, Follow, No Snippet', value: 'index,follow,nosnippet' },
  ];

  const languageOptions = [
    { label: 'Ti·∫øng Vi·ªát', value: 'vi' },
    { label: 'English', value: 'en' },
    { label: '‰∏≠Êñá', value: 'zh' },
    { label: 'Êó•Êú¨Ë™û', value: 'ja' },
    { label: 'ÌïúÍµ≠Ïñ¥', value: 'ko' },
  ];

  const localeOptions = [
    { label: 'Ti·∫øng Vi·ªát (Vi·ªát Nam)', value: 'vi_VN' },
    { label: 'English (US)', value: 'en_US' },
    { label: 'English (UK)', value: 'en_GB' },
    { label: '‰∏≠Êñá (ÁÆÄ‰Ωì)', value: 'zh_CN' },
    { label: 'Êó•Êú¨Ë™û (Êó•Êú¨)', value: 'ja_JP' },
  ];

  const renderInfoIcon = (tooltip: string) => (
    <Tooltip title={tooltip} placement="top">
      <InfoCircleOutlined style={{ color: '#1890ff', marginLeft: '8px' }} />
    </Tooltip>
  );

  return (
    <Card 
      title={
        <Space>
          <GlobalOutlined style={{ color: '#1890ff' }} />
          <span>Th√¥ng tin SEO</span>
          <Tooltip title="T·ªëi ∆∞u h√≥a c√¥ng c·ª• t√¨m ki·∫øm (SEO) gi√∫p trang web c·ªßa b·∫°n d·ªÖ d√†ng ƒë∆∞·ª£c t√¨m th·∫•y tr√™n Google v√† c√°c c√¥ng c·ª• t√¨m ki·∫øm kh√°c">
            <InfoCircleOutlined style={{ color: '#1890ff' }} />
          </Tooltip>
        </Space>
      } 
      style={{ marginBottom: '24px' }}
      className="seo-form-card"
    >
      <Collapse 
        defaultActiveKey={['basic', 'social', 'advanced']} 
        ghost
        expandIconPosition="end"
        className="seo-collapse"
      >
        {/* Th√¥ng tin SEO c∆° b·∫£n */}
        <Panel 
          header={
            <Space>
              <GlobalOutlined style={{ color: '#52c41a' }} />
              <span>Th√¥ng tin SEO c∆° b·∫£n</span>
            </Space>
          } 
          key="basic"
          className="seo-panel"
        >
          <Row gutter={[24, 16]}>
            <Col span={12}>
              <Form.Item
                label={
                  <Space>
                    <span>Meta Title</span>
                    {renderInfoIcon('Ti√™u ƒë·ªÅ trang hi·ªÉn th·ªã tr√™n k·∫øt qu·∫£ t√¨m ki·∫øm. N√™n c√≥ 50-60 k√Ω t·ª± v√† ch·ª©a t·ª´ kh√≥a ch√≠nh')}
                  </Space>
                }
                name={['seo_data', 'page_title']}
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p Meta Title!' }]}
              >
                <Input 
                  placeholder="Ti√™u ƒë·ªÅ trang cho SEO (50-60 k√Ω t·ª±)" 
                  maxLength={60} 
                  showCount 
                  size="large"
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                label={
                  <Space>
                    <span>Meta Description</span>
                    {renderInfoIcon('M√¥ t·∫£ ng·∫Øn g·ªçn n·ªôi dung trang, hi·ªÉn th·ªã d∆∞·ªõi ti√™u ƒë·ªÅ tr√™n k·∫øt qu·∫£ t√¨m ki·∫øm. N√™n c√≥ 120-160 k√Ω t·ª±')}
                  </Space>
                }
                name={['seo_data', 'meta_description']}
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p Meta Description!' }]}
              >
                <TextArea 
                  rows={3} 
                  placeholder="M√¥ t·∫£ meta cho SEO (120-160 k√Ω t·ª±)" 
                  maxLength={160} 
                  showCount 
                  size="large"
                />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={[24, 16]}>
            <Col span={12}>
              <Form.Item
                label={
                  <Space>
                    <span>Meta Keywords</span>
                    {renderInfoIcon('T·ª´ kh√≥a ch√≠nh c·ªßa trang. M·∫∑c d√π Google kh√¥ng s·ª≠ d·ª•ng tr·ª±c ti·∫øp, nh∆∞ng v·∫´n h·ªØu √≠ch cho c√°c c√¥ng c·ª• t√¨m ki·∫øm kh√°c')}
                  </Space>
                }
                name={['seo_data', 'meta_keywords']}
              >
                <Select
                  mode="tags"
                  placeholder="Nh·∫≠p t·ª´ kh√≥a SEO"
                  style={{ width: '100%' }}
                  maxTagCount={10}
                  size="large"
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                label={
                  <Space>
                    <span>Canonical URL</span>
                    {renderInfoIcon('URL ch√≠nh th·ª©c c·ªßa trang, gi√∫p tr√°nh duplicate content khi c√≥ nhi·ªÅu URL tr·ªè ƒë·∫øn c√πng n·ªôi dung')}
                  </Space>
                }
                name={['seo_data', 'canonical_url']}
              >
                <Input
                  placeholder={`${import.meta.env.VITE_PUBLIC_SITE_URL || 'https://example.com'}/product`}
                  size="large"
                />
              </Form.Item>
            </Col>
          </Row>

          {/* Technical Settings Row - Combined fields for better UX */}
          <div className="combined-field-group">
            <Row gutter={[24, 0]}>
              <Col span={12}>
                <Form.Item
                  label={
                    <Space>
                      <span>Ng√¥n ng·ªØ</span>
                      {renderInfoIcon('Ng√¥n ng·ªØ ch√≠nh c·ªßa trang, gi√∫p Google hi·ªÉu v√† index ƒë√∫ng ng√¥n ng·ªØ')}
                    </Space>
                  }
                  name={['seo_data', 'language']}
                  initialValue="vi"
                >
                  <Select options={languageOptions} size="large" />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item
                  label={
                    <Space>
                      <span>Robots Directive</span>
                      {renderInfoIcon('Ch·ªâ th·ªã cho c√°c bot t√¨m ki·∫øm v·ªÅ c√°ch index v√† follow links tr√™n trang')}
                    </Space>
                  }
                  name={['seo_data', 'robots_directive']}
                  initialValue="index,follow"
                >
                  <Select options={robotsOptions} size="large" />
                </Form.Item>
              </Col>
            </Row>
          </div>

          <div className="combined-field-group">
            <Row gutter={[24, 0]}>
              <Col span={12}>
                <Form.Item
                  label={
                    <Space>
                      <span>Character Encoding</span>
                      {renderInfoIcon('B·ªô m√£ k√Ω t·ª± c·ªßa trang, th∆∞·ªùng l√† UTF-8 ƒë·ªÉ h·ªó tr·ª£ ƒëa ng√¥n ng·ªØ')}
                    </Space>
                  }
                  name={['seo_data', 'charset']}
                  initialValue="UTF-8"
                >
                  <Input size="large" />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item
                  label={
                    <Space>
                      <span>Viewport</span>
                      {renderInfoIcon('C√†i ƒë·∫∑t viewport cho responsive design, gi√∫p trang hi·ªÉn th·ªã t·ªët tr√™n mobile')}
                    </Space>
                  }
                  name={['seo_data', 'viewport']}
                  initialValue="width=device-width, initial-scale=1"
                >
                  <Input size="large" />
                </Form.Item>
              </Col>
            </Row>
          </div>

          {/* Hreflang Section - Enhanced styling for JSON editing */}
          <div className="json-field-container">
            <Form.Item
              label={
                <Space>
                  <span>Hreflang Tags (JSON)</span>
                  {renderInfoIcon('Th·∫ª hreflang cho ƒëa ng√¥n ng·ªØ, gi√∫p Google hi·ªÉu m·ªëi quan h·ªá gi·ªØa c√°c phi√™n b·∫£n ng√¥n ng·ªØ kh√°c nhau')}
                </Space>
              }
              name={['seo_data', 'hreflang']}
              extra={
                <Button size="small" onClick={() => {
                  const canonical = form?.form?.getFieldValue(['seo_data','canonical_url']) || `${import.meta.env.VITE_PUBLIC_SITE_URL || 'https://example.com'}/product`;
                  const base = canonical.replace(/\/$/, '');
                  const example = [
                    { lang: 'vi', url: `${base}/vi` },
                    { lang: 'en', url: `${base}/en` },
                  ];
                  form?.form?.setFieldsValue({ seo_data: { hreflang: example } });
                }}>T·∫°o d·ªØ li·ªáu th√¥ng minh</Button>
              }
            >
              <JsonFieldWrapper />
            </Form.Item>
          </div>
        </Panel>

        {/* Open Graph & Social Media */}
        <Panel 
          header={
            <Space>
              <ShareAltOutlined style={{ color: '#722ed1' }} />
              <span>Open Graph & Social Media</span>
            </Space>
          } 
          key="social"
          className="seo-panel"
        >
          <Row gutter={[24, 16]}>
            <Col span={12}>
              <Form.Item
                label={
                  <Space>
                    <span>OG Title</span>
                    {renderInfoIcon('Ti√™u ƒë·ªÅ hi·ªÉn th·ªã khi chia s·∫ª tr√™n Facebook, LinkedIn v√† c√°c m·∫°ng x√£ h·ªôi kh√°c')}
                  </Space>
                }
                name={['seo_data', 'og_title']}
              >
                <Input 
                  placeholder="Ti√™u ƒë·ªÅ Open Graph" 
                  maxLength={60} 
                  showCount 
                  size="large"
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                label={
                  <Space>
                    <span>OG Description</span>
                    {renderInfoIcon('M√¥ t·∫£ hi·ªÉn th·ªã khi chia s·∫ª tr√™n m·∫°ng x√£ h·ªôi, n√™n c√≥ 200 k√Ω t·ª± ƒë·ªÉ t·ªëi ∆∞u hi·ªÉn th·ªã')}
                  </Space>
                }
                name={['seo_data', 'og_description']}
              >
                <TextArea 
                  rows={3} 
                  placeholder="M√¥ t·∫£ Open Graph" 
                  maxLength={200} 
                  showCount 
                  size="large"
                />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={[24, 16]}>
            <Col span={8}>
              <Form.Item
                label={
                  <Space>
                    <span>OG Type</span>
                    {renderInfoIcon('Lo·∫°i n·ªôi dung Open Graph, gi√∫p m·∫°ng x√£ h·ªôi hi·ªÉu v√† hi·ªÉn th·ªã ƒë√∫ng ƒë·ªãnh d·∫°ng')}
                  </Space>
                }
                name={['seo_data', 'og_type']}
                initialValue="website"
              >
                <Select options={ogTypeOptions} onChange={setOgType} size="large" />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                label={
                  <Space>
                    <span>OG Site Name</span>
                    {renderInfoIcon('T√™n website, hi·ªÉn th·ªã b√™n d∆∞·ªõi ti√™u ƒë·ªÅ khi chia s·∫ª tr√™n m·∫°ng x√£ h·ªôi')}
                  </Space>
                }
                name={['seo_data', 'og_site_name']}
                initialValue={import.meta.env.VITE_PUBLIC_SITE_NAME || 'Example Site'}
              >
                <Input placeholder="T√™n website" size="large" />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                label={
                  <Space>
                    <span>OG Locale</span>
                    {renderInfoIcon('Ng√¥n ng·ªØ v√† v√πng mi·ªÅn c·ªßa n·ªôi dung Open Graph')}
                  </Space>
                }
                name={['seo_data', 'og_locale']}
                initialValue="vi_VN"
              >
                <Select options={localeOptions} size="large" />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={[24, 16]}>
            <Col span={12}>
              <Form.Item
                label={
                  <Space>
                    <span>OG Image</span>
                    {renderInfoIcon('H√¨nh ·∫£nh hi·ªÉn th·ªã khi chia s·∫ª tr√™n m·∫°ng x√£ h·ªôi. N√™n c√≥ k√≠ch th∆∞·ªõc 1200x630px. Ch·ªçn t·ª´ th∆∞ vi·ªán h√¨nh ·∫£nh ƒë√£ upload')}
                  </Space>
                }
                name={['seo_data', 'og_image']}
              >
                <MediaSelector
                  placeholder="Ch·ªçn h√¨nh ·∫£nh OG t·ª´ th∆∞ vi·ªán"
                  onSelect={(media) => {
                    // Update the form with the selected image URL
                    form?.form?.setFieldsValue({
                      seo_data: {
                        ...form?.form?.getFieldValue('seo_data'),
                        og_image: media.file_url
                      }
                    });
                  }}
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                label={
                  <Space>
                    <span>OG Audio</span>
                    {renderInfoIcon('File audio li√™n quan ƒë·∫øn n·ªôi dung (n·∫øu c√≥)')}
                  </Space>
                }
                name={['seo_data', 'og_audio']}
              >
                <Input 
                  placeholder="URL audio file (n·∫øu c√≥)" 
                  size="large"
                />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={[24, 16]}>
            <Col span={12}>
              <Form.Item
                label={
                  <Space>
                    <span>OG Video</span>
                    {renderInfoIcon('File video li√™n quan ƒë·∫øn n·ªôi dung (n·∫øu c√≥)')}
                  </Space>
                }
                name={['seo_data', 'og_video']}
              >
                <Input 
                  placeholder="URL video file (n·∫øu c√≥)" 
                  size="large"
                />
              </Form.Item>
            </Col>
          </Row>
        </Panel>

        {/* Twitter Card */}
        <Panel 
          header={
            <Space>
              <TwitterOutlined style={{ color: '#1da1f2' }} />
              <span>Twitter Card</span>
            </Space>
          } 
          key="twitter"
          className="seo-panel"
        >
          <Row gutter={[24, 16]}>
            <Col span={12}>
              <Form.Item
                label={
                  <Space>
                    <span>Twitter Title</span>
                    {renderInfoIcon('Ti√™u ƒë·ªÅ hi·ªÉn th·ªã khi chia s·∫ª tr√™n Twitter. N√™n kh√°c v·ªõi OG Title ƒë·ªÉ t·ªëi ∆∞u cho t·ª´ng n·ªÅn t·∫£ng')}
                  </Space>
                }
                name={['seo_data', 'twitter_title']}
              >
                <Input 
                  placeholder="Ti√™u ƒë·ªÅ Twitter" 
                  maxLength={60} 
                  showCount 
                  size="large"
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                label={
                  <Space>
                    <span>Twitter Description</span>
                    {renderInfoIcon('M√¥ t·∫£ hi·ªÉn th·ªã khi chia s·∫ª tr√™n Twitter, t·ªëi ∆∞u cho gi·ªõi h·∫°n k√Ω t·ª± c·ªßa Twitter')}
                  </Space>
                }
                name={['seo_data', 'twitter_description']}
              >
                <TextArea 
                  rows={3} 
                  placeholder="M√¥ t·∫£ Twitter" 
                  maxLength={200} 
                  showCount 
                  size="large"
                />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={[24, 16]}>
            <Col span={8}>
              <Form.Item
                label={
                  <Space>
                    <span>Twitter Card Type</span>
                    {renderInfoIcon('Lo·∫°i Twitter Card, ·∫£nh h∆∞·ªüng ƒë·∫øn c√°ch n·ªôi dung hi·ªÉn th·ªã tr√™n Twitter')}
                  </Space>
                }
                name={['seo_data', 'twitter_card']}
                initialValue="summary_large_image"
              >
                <Select options={twitterCardOptions} onChange={setTwitterCard} size="large" />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                label={
                  <Space>
                    <span>Twitter Creator</span>
                    {renderInfoIcon('Username Twitter c·ªßa t√°c gi·∫£ n·ªôi dung (@username)')}
                  </Space>
                }
                name={['seo_data', 'twitter_creator']}
              >
                <Input placeholder={import.meta.env.VITE_PUBLIC_TWITTER_CREATOR || "@username"} size="large" />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                label={
                  <Space>
                    <span>Twitter Site</span>
                    {renderInfoIcon('Username Twitter c·ªßa website (@sitename)')}
                  </Space>
                }
                name={['seo_data', 'twitter_site']}
              >
                <Input placeholder={import.meta.env.VITE_PUBLIC_TWITTER_SITE || "@sitename"} size="large" />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={[24, 16]}>
            <Col span={12}>
              <Form.Item
                label={
                  <Space>
                    <span>Twitter Image</span>
                    {renderInfoIcon('H√¨nh ·∫£nh hi·ªÉn th·ªã khi chia s·∫ª tr√™n Twitter. N√™n c√≥ k√≠ch th∆∞·ªõc 1200x600px. Ch·ªçn t·ª´ th∆∞ vi·ªán h√¨nh ·∫£nh ƒë√£ upload')}
                  </Space>
                }
                name={['seo_data', 'twitter_image']}
              >
                <MediaSelector
                  placeholder="Ch·ªçn h√¨nh ·∫£nh Twitter t·ª´ th∆∞ vi·ªán"
                  onSelect={(media) => {
                    // Update the form with the selected image URL
                    form?.form?.setFieldsValue({
                      seo_data: {
                        ...form?.form?.getFieldValue('seo_data'),
                        twitter_image: media.file_url
                      }
                    });
                  }}
                />
              </Form.Item>
            </Col>
          </Row>
        </Panel>

        {/* Schema.org & Technical SEO */}
        <Panel 
          header={
            <Space>
              <CodeOutlined style={{ color: '#fa8c16' }} />
              <span>Schema.org & Technical SEO</span>
            </Space>
          } 
          key="schema"
          className="seo-panel"
        >
          <Form.Item
            label={
              <Space>
                <span>Schema Markup (JSON-LD)</span>
                {renderInfoIcon('D·ªØ li·ªáu c√≥ c·∫•u tr√∫c Schema.org gi√∫p Google hi·ªÉu r√µ n·ªôi dung trang v√† hi·ªÉn th·ªã rich snippets')}
              </Space>
            }
            name={['seo_data', 'schema_markup']}
            extra={
              <Space size={8}>
                <span>Nh·∫≠p d·ªØ li·ªáu c√≥ c·∫•u tr√∫c Schema.org d·∫°ng JSON-LD ƒë·ªÉ t·ªëi ∆∞u hi·ªÉn th·ªã tr√™n k·∫øt qu·∫£ t√¨m ki·∫øm</span>
                <Button size="small" onClick={() => {
                  const baseUrl = import.meta.env.VITE_PUBLIC_SITE_URL || 'https://example.com';

                  // Helper function to replace localhost URLs with production URL
                  const replaceLocalhostUrl = (url: string) => {
                    if (url && url.includes('localhost')) {
                      return url.replace(/https?:\/\/localhost(:\d+)?/, baseUrl);
                    }
                    return url;
                  };

                  // Get selected image if available
                  const selectedOgImage = form?.form?.getFieldValue(['seo_data', 'og_image']);
                  const imageUrl = selectedOgImage ? replaceLocalhostUrl(selectedOgImage) : `${baseUrl}/images/product-default.jpg`;

                  const example = {
                    '@context': 'https://schema.org',
                    '@type': 'Product',
                    name: form?.form?.getFieldValue('name') || 'T√™n s·∫£n ph·∫©m',
                    description: form?.form?.getFieldValue('short_description') || 'M√¥ t·∫£ s·∫£n ph·∫©m',
                    brand: form?.form?.getFieldValue('brand') || import.meta.env.VITE_PUBLIC_SITE_NAME || 'Th∆∞∆°ng hi·ªáu',
                    sku: form?.form?.getFieldValue('sku') || 'SKU-001',
                    offers: {
                      '@type': 'Offer',
                      price: String(form?.form?.getFieldValue('price') || 1000000),
                      priceCurrency: 'VND',
                      availability: 'https://schema.org/InStock'
                    },
                    url: `${baseUrl}${form?.form?.getFieldValue('slug') ? '/' + form?.form?.getFieldValue('slug') : '/product'}`,
                    image: imageUrl,
                    publisher: {
                      '@type': 'Organization',
                      name: import.meta.env.VITE_PUBLIC_SITE_NAME || 'Website',
                      logo: {
                        '@type': 'ImageObject',
                        url: `${baseUrl}/logo.png`
                      }
                    }
                  };
                  form?.form?.setFieldsValue({ seo_data: { schema_markup: example } });
                }}>T·∫°o d·ªØ li·ªáu th√¥ng minh</Button>
              </Space>
            }
          >
            <JsonFieldWrapper />
          </Form.Item>
        </Panel>

        {/* Performance & Metrics */}
        <Panel 
          header={
            <Space>
              <BarChartOutlined style={{ color: '#13c2c2' }} />
              <span>Performance & Metrics</span>
            </Space>
          } 
          key="performance"
          className="seo-panel"
        >
          <Row gutter={[24, 16]}>
            <Col span={8}>
              <Form.Item
                label={
                  <Space>
                    <span>SEO Score</span>
                    {renderInfoIcon('ƒêi·ªÉm SEO t·ªïng th·ªÉ t·ª´ 0-100, ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng SEO c·ªßa trang')}
                  </Space>
                }
                name={['seo_data', 'seo_score']}
              >
                <InputNumber 
                  min={0} 
                  max={100} 
                  placeholder="0-100"
                  style={{ width: '100%' }}
                  size="large"
                />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                label={
                  <Space>
                    <span>Keyword Difficulty</span>
                    {renderInfoIcon('ƒê·ªô kh√≥ c·ªßa t·ª´ kh√≥a t·ª´ 0-100. S·ªë c√†ng cao th√¨ c√†ng kh√≥ x·∫øp h·∫°ng')}
                  </Space>
                }
                name={['seo_data', 'keyword_difficulty']}
              >
                <InputNumber 
                  min={0} 
                  max={100} 
                  placeholder="0-100"
                  style={{ width: '100%' }}
                  size="large"
                />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                label={
                  <Space>
                    <span>Search Volume</span>
                    {renderInfoIcon('L∆∞·ª£t t√¨m ki·∫øm trung b√¨nh h√†ng th√°ng cho t·ª´ kh√≥a ch√≠nh')}
                  </Space>
                }
                name={['seo_data', 'search_volume']}
              >
                <InputNumber 
                  min={0} 
                  placeholder="L∆∞·ª£t t√¨m ki·∫øm/th√°ng"
                  style={{ width: '100%' }}
                  size="large"
                />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={[24, 16]}>
            <Col span={8}>
              <Form.Item
                label={
                  <Space>
                    <span>Page Load Time (s)</span>
                    {renderInfoIcon('Th·ªùi gian t·∫£i trang. N√™n d∆∞·ªõi 3 gi√¢y ƒë·ªÉ t·ªëi ∆∞u tr·∫£i nghi·ªám ng∆∞·ªùi d√πng v√† SEO')}
                  </Space>
                }
                name={['seo_data', 'page_load_time']}
              >
                <InputNumber 
                  min={0} 
                  step={0.1}
                  placeholder="Th·ªùi gian t·∫£i (gi√¢y)"
                  style={{ width: '100%' }}
                  size="large"
                />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                label={
                  <Space>
                    <span>Mobile Friendly Score</span>
                    {renderInfoIcon('ƒêi·ªÉm th√¢n thi·ªán mobile t·ª´ 0-100. Google ∆∞u ti√™n mobile-first indexing')}
                  </Space>
                }
                name={['seo_data', 'mobile_friendly_score']}
              >
                <InputNumber 
                  min={0} 
                  max={100} 
                  placeholder="0-100"
                  style={{ width: '100%' }}
                  size="large"
                />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                label={
                  <Space>
                    <span>Accessibility Score</span>
                    {renderInfoIcon('ƒêi·ªÉm accessibility t·ª´ 0-100, ƒë√°nh gi√° kh·∫£ nƒÉng ti·∫øp c·∫≠n c·ªßa ng∆∞·ªùi khuy·∫øt t·∫≠t')}
                  </Space>
                }
                name={['seo_data', 'accessibility_score']}
              >
                <InputNumber 
                  min={0} 
                  max={100} 
                  placeholder="0-100"
                  style={{ width: '100%' }}
                  size="large"
                />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={[24, 16]}>
            <Col span={8}>
              <Form.Item
                label={
                  <Space>
                    <span>Core Web Vitals Score</span>
                    {renderInfoIcon('ƒêi·ªÉm Core Web Vitals t·ª´ 0-100, ƒë√°nh gi√° tr·∫£i nghi·ªám ng∆∞·ªùi d√πng')}
                  </Space>
                }
                name={['seo_data', 'core_web_vitals_score']}
              >
                <InputNumber 
                  min={0} 
                  max={100} 
                  placeholder="0-100"
                  style={{ width: '100%' }}
                  size="large"
                />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                label={
                  <Space>
                    <span>Content Length (t·ª´)</span>
                    {renderInfoIcon('S·ªë t·ª´ trong n·ªôi dung. N·ªôi dung d√†i th∆∞·ªùng c√≥ c∆° h·ªôi x·∫øp h·∫°ng t·ªët h∆°n')}
                  </Space>
                }
                name={['seo_data', 'content_length']}
              >
                <InputNumber 
                  min={0} 
                  placeholder="S·ªë t·ª´"
                  style={{ width: '100%' }}
                  size="large"
                />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                label={
                  <Space>
                    <span>Image Optimization Score</span>
                    {renderInfoIcon('ƒêi·ªÉm t·ªëi ∆∞u h√¨nh ·∫£nh t·ª´ 0-100, bao g·ªìm k√≠ch th∆∞·ªõc, format v√† alt text')}
                  </Space>
                }
                name={['seo_data', 'image_optimization_score']}
              >
                <InputNumber 
                  min={0} 
                  max={100} 
                  placeholder="0-100"
                  style={{ width: '100%' }}
                  size="large"
                />
              </Form.Item>
            </Col>
          </Row>
        </Panel>

        {/* Advanced SEO Metrics */}
        <Panel 
          header={
            <Space>
              <TrophyOutlined style={{ color: '#f5222d' }} />
              <span>Advanced SEO Metrics (2025+)</span>
            </Space>
          } 
          key="advanced"
          className="seo-panel"
        >
          <Row gutter={[24, 16]}>
            <Col span={12}>
              <Form.Item
                label={
                  <Space>
                    <span>Core Web Vitals (JSON)</span>
                    {renderInfoIcon('Ch·ªâ s·ªë Core Web Vitals chi ti·∫øt: LCP, FID, CLS, INP, TTFB. Gi√∫p ƒë√°nh gi√° performance')}
                  </Space>
                }
                name={['seo_data', 'core_web_vitals']}
                extra={
                  <Space size={8}>
                    <span>LCP, FID, CLS, INP, TTFB metrics</span>
                    <Button size="small" onClick={() => {
                      const example = { lcp: 2.4, fid: 80, cls: 0.08, inp: 180, ttfb: 750 };
                      form?.form?.setFieldsValue({ seo_data: { core_web_vitals: example } });
                    }}>T·∫°o d·ªØ li·ªáu th√¥ng minh</Button>
                  </Space>
                }
              >
                <JsonFieldWrapper />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                label={
                  <Space>
                    <span>AI & ML Metrics (JSON)</span>
                    {renderInfoIcon('Ch·ªâ s·ªë AI & ML SEO: AI relevance score, ML ranking factors. Xu h∆∞·ªõng SEO t∆∞∆°ng lai')}
                  </Space>
                }
                name={['seo_data', 'ai_ml_metrics']}
                extra={
                  <Space size={8}>
                    <span>AI relevance score, ML ranking factors</span>
                    <Button size="small" onClick={() => {
                      const example = { ai_relevance_score: 88, ml_ranking_factors: ['content_quality', 'user_engagement', 'page_experience'] };
                      form?.form?.setFieldsValue({ seo_data: { ai_ml_metrics: example } });
                    }}>T·∫°o d·ªØ li·ªáu th√¥ng minh</Button>
                  </Space>
                }
              >
                <JsonFieldWrapper />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={[24, 16]}>
            <Col span={12}>
              <Form.Item
                label={
                  <Space>
                    <span>E-E-A-T Metrics (JSON)</span>
                    {renderInfoIcon('Experience, Expertise, Authoritativeness, Trust. Ti√™u ch√≠ ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng n·ªôi dung c·ªßa Google')}
                  </Space>
                }
                name={['seo_data', 'eeat_metrics']}
                extra={
                  <Space size={8}>
                    <span>Experience, Expertise, Authoritativeness, Trust</span>
                    <Button size="small" onClick={() => {
                      const example = { experience: 90, expertise: 85, authoritativeness: 82, trust: 94 };
                      form?.form?.setFieldsValue({ seo_data: { eeat_metrics: example } });
                    }}>T·∫°o d·ªØ li·ªáu th√¥ng minh</Button>
                  </Space>
                }
              >
                <JsonFieldWrapper />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                label={
                  <Space>
                    <span>Voice & Visual Search (JSON)</span>
                    {renderInfoIcon('T·ªëi ∆∞u cho t√¨m ki·∫øm b·∫±ng gi·ªçng n√≥i v√† h√¨nh ·∫£nh. Xu h∆∞·ªõng t√¨m ki·∫øm t∆∞∆°ng lai')}
                  </Space>
                }
                name={['seo_data', 'voice_visual_metrics']}
                extra={
                  <Space size={8}>
                    <span>Voice search optimization, visual search data</span>
                    <Button size="small" onClick={() => {
                      const example = { voice_optimization: 78, visual_search: 82, semantic_keywords: ['t√¨m ki·∫øm gi·ªçng n√≥i', 't√¨m ki·∫øm h√¨nh ·∫£nh'] };
                      form?.form?.setFieldsValue({ seo_data: { voice_visual_metrics: example } });
                    }}>T·∫°o d·ªØ li·ªáu th√¥ng minh</Button>
                  </Space>
                }
              >
                <JsonFieldWrapper />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={[24, 16]}>
            <Col span={12}>
              <Form.Item
                label={
                  <Space>
                    <span>Privacy & Compliance (JSON)</span>
                    {renderInfoIcon('Tu√¢n th·ªß quy ƒë·ªãnh b·∫£o m·∫≠t: GDPR, CCPA. ·∫¢nh h∆∞·ªüng ƒë·∫øn trust score v√† SEO')}
                  </Space>
                }
                name={['seo_data', 'privacy_compliance']}
                extra={
                  <Space size={8}>
                    <span>GDPR, CCPA, privacy signals</span>
                    <Button size="small" onClick={() => {
                      const example = { gdpr_compliant: true, ccpa_compliant: true, privacy_signals: ['https', 'privacy_policy', 'cookie_banner'] };
                      form?.form?.setFieldsValue({ seo_data: { privacy_compliance: example } });
                    }}>T·∫°o d·ªØ li·ªáu th√¥ng minh</Button>
                  </Space>
                }
              >
                <JsonFieldWrapper />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                label={
                  <Space>
                    <span>Future Metrics (JSON)</span>
                    {renderInfoIcon('Ch·ªâ s·ªë SEO t∆∞∆°ng lai: Quantum SEO, Neural networks, BCI, Spatial computing')}
                  </Space>
                }
                name={['seo_data', 'future_metrics']}
                extra={
                  <Space size={8}>
                    <span>Quantum SEO, Neural networks, BCI, Spatial computing</span>
                    <Button size="small" onClick={() => {
                      const example = { quantum_seo: 62, neural_networks: 71, bci_optimization: 54, spatial_computing: 66 };
                      form?.form?.setFieldsValue({ seo_data: { future_metrics: example } });
                    }}>T·∫°o d·ªØ li·ªáu th√¥ng minh</Button>
                  </Space>
                }
              >
                <JsonFieldWrapper />
              </Form.Item>
            </Col>
          </Row>
        </Panel>

        {/* SEO Status */}
        <Panel 
          header={
            <Space>
              <SettingOutlined style={{ color: '#eb2f96' }} />
              <span>Tr·∫°ng th√°i SEO</span>
            </Space>
          } 
          key="status"
          className="seo-panel"
        >
          <Row gutter={[24, 16]}>
            <Col span={6}>
              <Form.Item
                label={
                  <Space>
                    <span>ƒê∆∞·ª£c index</span>
                    {renderInfoIcon('Cho ph√©p Google v√† c√°c c√¥ng c·ª• t√¨m ki·∫øm kh√°c index trang n√†y')}
                  </Space>
                }
                name={['seo_data', 'is_indexed']}
                valuePropName="checked"
                initialValue={true}
              >
                <Switch size="default" />
              </Form.Item>
            </Col>
            <Col span={6}>
              <Form.Item
                label={
                  <Space>
                    <span>SSL Secure</span>
                    {renderInfoIcon('Trang c√≥ s·ª≠ d·ª•ng HTTPS. Google ∆∞u ti√™n c√°c trang b·∫£o m·∫≠t')}
                  </Space>
                }
                name={['seo_data', 'is_ssl_secure']}
                valuePropName="checked"
                initialValue={true}
              >
                <Switch size="default" />
              </Form.Item>
            </Col>
            <Col span={6}>
              <Form.Item
                label={
                  <Space>
                    <span>Featured SEO</span>
                    {renderInfoIcon('ƒê√°nh d·∫•u trang ƒë∆∞·ª£c ∆∞u ti√™n SEO, c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn th·ª© t·ª± x·ª≠ l√Ω')}
                  </Space>
                }
                name={['seo_data', 'is_featured']}
                valuePropName="checked"
              >
                <Switch size="default" />
              </Form.Item>
            </Col>
            <Col span={6}>
              <Form.Item
                label={
                  <Space>
                    <span>Active</span>
                    {renderInfoIcon('Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa trang SEO')}
                  </Space>
                }
                name={['seo_data', 'is_active']}
                valuePropName="checked"
                initialValue={true}
              >
                <Switch size="default" />
              </Form.Item>
            </Col>
          </Row>
        </Panel>
      </Collapse>
    </Card>
  );
};
